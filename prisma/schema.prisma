generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STAFF
  GA
}

model User {
  id                 String               @id @default(uuid())
  firstName          String
  lastName           String?
  email              String               @unique
  image              String?
  password           String
  socialMedia        String[]             
  role               Role                 @default(GA)
  isActive           Boolean              @default(false)
  isManager          Boolean              @default(false)
  manager            String?              // user id manager            
  updatedAt          DateTime?            
  createdAt          DateTime             @default(now())
  isDeleted          Boolean              @default(false)

  // Relations
  approvalsRequested Approval[]           @relation("RequestedForApprovals")
  approvalsCreated   Approval[]           @relation("CreatedApprovals")
  signatures         ApprovalSignature[]  // user bisa tanda tangan banyak approval
}

model Upload {
  id         String   @id @default(uuid())
  filename   String
  mimeType   String
  extension  String
  size       Int
  url        String
  storageKey String
  category   String?
  uploaderId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id         String   @id @default(uuid())
  name       String
  prefix     String
  isDevice   Boolean   @default(false)
  updatedAt  DateTime?   
  createdAt  DateTime  @default(now())
  isDeleted  Boolean   @default(false)
  assets     Asset[]
}

model Asset {
  id            String   @id @default(uuid())
  name          String
  code          String   @unique
  isMaintenance Boolean  @default(false)
  serialNumber  String?
  image         String?
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id])
  updatedAt     DateTime?
  createdAt     DateTime @default(now())
  isDeleted     Boolean  @default(false)

  ApprovalAsset ApprovalAsset[]
}

enum SubmissionType {
  PROCUREMENT
  MAINTENANCE
  WRITE_OFF
  ASSIGNMENT
}

enum RequestStatus {
  DRAFT
  WAITING_APPROVAL
  READY_ON_PROGRESS
  ON_PROGRESS
  DONE
  ORDERED
}

model Approval {
  id             String               @id @default(uuid())
  submissionType SubmissionType
  status         RequestStatus        @default(DRAFT)
  notes          String?

  createdById    String
  createdBy      User                 @relation("CreatedApprovals", fields: [createdById], references: [id])

  requestedForId String?
  requestedFor   User?                @relation("RequestedForApprovals", fields: [requestedForId], references: [id])

  assets         ApprovalAsset[]
  signatures     ApprovalSignature[]  

  createdAt      DateTime             @default(now())
  updatedAt      DateTime?      
  isDeleted      Boolean              @default(false)
}

model ApprovalSignature {
  id          String    @id @default(uuid())
  email       String?
  name        String?
  image       String?
  signedAt    DateTime? 

  approvalId  String
  approval    Approval  @relation(fields: [approvalId], references: [id])

  userId      String?
  user        User?     @relation(fields: [userId], references: [id])

  updatedAt   DateTime?
}

model ApprovalAsset {
  id          String    @id @default(uuid())
  approvalId  String
  assetId     String

  approval    Approval  @relation(fields: [approvalId], references: [id])
  asset       Asset     @relation(fields: [assetId], references: [id])
}
